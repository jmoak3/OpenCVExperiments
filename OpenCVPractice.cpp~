#include <stdio.h>
#include <pthread.h>
#include <cv.h>
#include <highgui.h>

void *readCamera(CvCapture *cam, IplImage * image, bool * wait, pthread_cond_t * can_read, pthread_mutex_t * mutex)
{
	while(1)
	{
		if (!wait)
		{
			pthread_mutex_lock(mutex);
			*image = cvQueryFrame(cam);
			*wait = true;
			pthread_cond_signal(can_read);
			pthread_mutex_unlock(mutex);
		}
	}
	pthread_exit(NULL);
	return NULL;
}

IplImage getImage(float * frameTime, IplImage* image, bool * wait, pthread_cond_t * can_read, pthread_mutex_t * mutex)
{	
	pthread_mutex_lock(mutex);
	while (!wait)
		pthread_cond_wait(can_read, mutex);
	IplImage img = *image;
	*wait = false;
	printf("%f\n", *frameTime);
	*frameTime = 0.f;
	pthread_mutex_unlock(mutex);
	*wait = false;
	return img;
}

int main(int argc, char** argv )
{
	printf("Doing Webcam!\n");
	cvNamedWindow("Webcam", WINDOW_AUTOSIZE);
	
	CvCapture *cam = cvCaptureFromCAM(0);
	pthread_mutex_t *mutex = PTHREAD_MUTEX_INITIALIZER;
	pthread_cond_t *can_read = PTHREAD_COND_INITIALIZER;
	IplImage * image = cvQueryFrame(cam);
	bool * wait = false;
	float frameTime = 0.f;

	pthread_t readThread;	
	pthread_create(&readThread, NULL, &readCamera, cam, image, wait, can_read, mutex);
	
	timespec timeobj;
	clock_gettime(CLOCK_MONOTONIC, &timeobj);
	float lastTime = timeobj.tv_nsec/1000000;
	float currTime = lastTime;
	while(1) 
	{
		cvShowImage("Webcam", getImage(frameTime, image, wait, can_read, mutex));
		clock_gettime(CLOCK_MONOTONIC, &timeobj);
		currTime = timeobj.tv_nsec/1000000;
		frameTime += currTime - lastTime;
		lastTime = currTime;
		if (cvWaitKey(5)==27) 
		{
			break;
		}
	}
	cvReleaseCapture(*cam);
	cvDestroyWindow("Webcam");	
	return 0;
}

